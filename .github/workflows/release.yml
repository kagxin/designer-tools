# This is a basic workflow to help you get started with Actions
on:
  release:
    types: # This configuration does not affect the page_build event above
      - created

name: Release
jobs:
  run_build:
    name: Run Test
    runs-on: ubuntu-latest
    container: golang:1.14

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get dependencies
        run: go env -w GO111MODULE=on && go mod tidy

      - name: Go Build
        run: make

      - name: Get release
        id: get_release
        uses: bruceadams/get-release@v1.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset Mktxt
        id: upload-release-asset-mktxt
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./mktxt.exe
          asset_name: mktxt.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Asset Mkdir
        id: upload-release-asset-mkdir
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./mkdir.exe
          asset_name: mkdir.exe
          asset_content_type: application/octet-stream